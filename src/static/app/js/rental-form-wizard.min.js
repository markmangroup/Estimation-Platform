// $(document).ready(function() {

const url = new URL(window.location.href);
const stage = url.searchParams.get('stage');
var changedQuantities = [];

// Determine the current stage
var currentStage = stage || Stagevalue; // Use URL parameter if available, otherwise use Stagevalue

// Define all possible stages
var rental_allStages = [
    "Create Delivery",
    "Pick Up Ticket",
    "Check Out",
    "Delivered To Customer",
    "Create Return Delivery",
    "Return Pick Up Ticket",
    "Check In",
    "Inspection Completed"
];

// Determine completed stages based on Stagevalue
var completedStages = rental_allStages.slice(0, rental_allStages.indexOf(Stagevalue) + 1);

var rental_stageMapping = {
    "Create Delivery": 0,
    "Pick Up Ticket":1,
    "Check Out":2,
    "Delivered To Customer":3,
    "Create Return Delivery":4,
    "Return Pick Up Ticket":5,
    "Check In":6,
    "Inspection Completed": 7
};
// Initialize the wizard
$(".rental-icons-tab-steps").steps({
    headerTag: "h6",
    bodyTag: "fieldset",
    transitionEffect: "fade",
    startIndex: rental_stageMapping[currentStage],
    titleTemplate: '<span class="step">#index#</span> #title#',
    labels: { finish: "Submit" },
    onStepChanging: function (event, currentIndex, newIndex) {
        if (newIndex > currentIndex) {
            var isValid = true;
            var currentFieldset = $(this).find("fieldset").eq(currentIndex);
            currentFieldset.find('.wizard-required').each(function () {
                var thisValue = $(this).val();
                var errorMessage = "";
                var quantity_errorMessage = "";
                var dataValue = $(this).data('value');
                
                // if (rental_stageMapping[currentStage] === 2) {  // "Check Out" stage
                //     console.log("Running validateTables() for 'Check Out' stage...");

                //     let validationResult = validateTables();
                
                //     if (!validationResult.valid) {
                    //         console.log("Validation FAILED - stopping progress.");
                    //         errorMessage = validationResult.message;  // Use the returned message
                    //     }
                    // }
                    if ($(this).is('select')) {
                        let selectedText = $(this).find('option:selected').text().trim();
                        let thisValue = $(this).val();
                        
                    console.log("Selected Text:", selectedText);
                    console.log("Selected Value:", thisValue);
                    console.log("Current Stage---------------->>>>>:", rental_stageMapping[currentStage]);
                


                    if (rental_stageMapping[currentStage] === 2) {  // "Check Out" stage
                        console.log("Running validateTables() for 'Check Out' stage...");

                        let validationResult = validateTables();

                        if (!validationResult.valid) {
                            console.log("Validation FAILED - stopping progress.");
                            errorMessage = validationResult.message;  // Use the returned message
                        }
                    }else if(rental_stageMapping[currentStage] === 1){
                        if (!validatepickupTables()) {
                            // return false;
                            errorMessage = "Please make sure to update or change statuses as needed and verify them.";
                        }
                    }
                    else{
                        if (thisValue === "" || $(this).find('option:selected').text() === "None") {
                            //alert("------------")
                            errorMessage = "Please make sure to update or change statuses as needed and verify them.";
                        }
                    }
                } else if ($(this).is('input')) {
                    var inputType = $(this).attr('type');

                    if (inputType === 'text') {
                        if (rental_stageMapping[currentStage] === 2) {  // "Check Out" stage
                            if (thisValue === "") {
                                errorMessage = "Could you please confirm that the quantity was filled correctly?";
                            } else if (thisValue != dataValue) {
                                quantity_errorMessage = `Quantity does not match. Please resolve it....`
                                sendQuantityUpdateAjax().then(() => {
                                    console.log('changedQuantities: updated after function call ', changedQuantities);
                                });
                                console.log('changedQuantities:into stage called funtion after list ', changedQuantities)
                            }
                        }else{
                            if (thisValue === "") {
                                errorMessage = "Could you please confirm that the quantity was filled correctly?";
                            } else if (thisValue != dataValue) {
                                // errorMessage = `Quantity does not match. Please resolve it....`;
                                quantity_errorMessage = `Quantity does not match. Please resolve it....`
                            }
                        }
                    } else if (inputType === 'date') {
                        if (thisValue === "") {
                            errorMessage = "Make sure update date, please verify and update the dates...";
                        } else if (new Date(thisValue) < new Date() && new Date(thisValue).toDateString() !== new Date().toDateString()) {
                            errorMessage = "Please make sure that the date selected is a current or future date and not a date that has already passed.";
                        }
                    }
                } else {
                    if (thisValue === "") {
                        errorMessage = "Could you please confirm that the quantity was filled correctly?";
                    }
                }

                if (errorMessage) {
                    $(this).siblings(".wizard-form-error").text(errorMessage).slideDown();
                    isValid = false;

                    Swal.fire({
                        text: errorMessage,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                    return false; // Stop further validation for this step
                } else if (quantity_errorMessage) {
                    $(this).siblings(".wizard-form-error").text(errorMessage).slideDown();
                    isValid = false;
                    console.log("Changed Quantities: into error messgae shows sweet alert before", changedQuantities);
                    
                    Swal.fire({
                        title: "Quantity Mismatch",
                        text: "All quantities in the linked documents will be updated based on the new quantity. Do you want to proceed?",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonText: "OK",
                        cancelButtonText: "Cancel"
                    }).then(async (result) => {
                        console.log("Swal result: ", result);
                        if (result) {
                            console.log("User clicked OK");
                            console.log("Changed Quantities AFTER function call:", changedQuantities);
                            sendQuantityAjaxRequest(changedQuantities)
                                .then((response) => {
                                    console.log('AJAX response:', response);
                                    if (response === true) { 
                                        $("#deliveryTable").DataTable().ajax.reload(null, false);
                                        $(this).siblings(".wizard-form-error").slideUp();
                                        toastr.success("Quantity Updated Successfully!", 'Success', {
                                            closeButton: true,
                                            progressBar: true,
                                            positionClass: 'toast-bottom-right',
                                            timeOut: 6000
                                        });
                                        return true;;
                                    } else {
                                        console.log("⚠️ AJAX failed, validation stopped. Response:", response);
                                        return false;   
                                    }
                                })
                                .catch((error) => {
                                    console.error("AJAX Error:", error);
                                    return false;
                                });
                    
                        } else {
                            console.log("User clicked Cancel");
                            isValid = false;
                            return false;
                        }
                    });
                } else {
                    $(this).siblings(".wizard-form-error").slideUp();
                }
            });
            if (isValid) {
                rental_stageMapping[currentStage]++;
                return true;
            }
            return false;
        }

        return true;
    },
    onFinished: function (event, currentIndex) {
        var isValid = true;
        var currentFieldset = $(this).find("fieldset").eq(currentIndex);

        currentFieldset.find('.wizard-required').each(function () {
            var thisValue = $(this).val();
            var isDisabled = $("#field-disabled").prop('disabled');
            var errorMessage = "";
            var dataValue = $(this).data('value');

            if ($(this).is('select')) {
                if (thisValue === "" || $(this).find('option:selected').text() === "None") {
                    //alert("---------234234")
                    errorMessage = "Please make sure to update or change statuses as needed and verify them.";
                }
            } else if (!isDisabled) {
                console.log("Not Disabled...........");
                errorMessage = "Here are some inspection still not confirm, please make sure all inspection are confirmed...";
            } else if ($(this).is('input')) {
                var inputType = $(this).attr('type');

                if (inputType === 'text') {
                    if (thisValue === "") {
                        errorMessage = "Could you please confirm that the quantity was filled correctly?";
                    } else if (thisValue != dataValue) {
                        errorMessage = `Quantity does not match for PROJ016968 1/2. Please resolve it....`;
                    }
                } else if (inputType === 'date') {
                    if (thisValue === "") {
                        errorMessage = "Make sure update date, please verify and update the dates...";
                    } else if (new Date(thisValue) < new Date() && new Date(thisValue).toDateString() !== new Date().toDateString()) {
                        errorMessage = "Please make sure that the date selected is a current or future date and not a date that has already passed.";
                    }
                }
            } else {
                if (thisValue === "") {
                    errorMessage = "Could you please confirm that the quantity was filled correctly?";
                }
            }

            if (errorMessage) {
                $(this).siblings(".wizard-form-error").text(errorMessage).slideDown();
                isValid = false;

                Swal.fire({
                    text: errorMessage,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return false; // Stop further validation for this step
            } else {
                $(this).siblings(".wizard-form-error").slideUp();
            }
        });

        if (isValid) {
            Swal.fire({
                title: 'Form Submitted!',
                text: 'Your form has been submitted successfully.',
                icon: 'success',
                confirmButtonText: 'OK'
            });
        }
    }
});

// Initialize date picker
$(".pickadate").pickadate();

// Add custom classes to navigation buttons
$('.wizard .actions a[role="menuitem"]').addClass("btn btn-primary");
$('.wizard .actions a[href="#previous"]').addClass("btn btn-secondary");

// Update the wizard steps based on the current stage and completed stages
const $stepsList = $('#steps-uid-0');
const $listItems = $stepsList.find('li');

// Mark completed stages as done
completedStages.forEach(function (stage) {
    var index = rental_stageMapping[stage];
    if (index !== undefined) {
        $listItems.eq(index)
            .removeClass('disabled')
            .addClass('done');
    }
});

var currentStageIndex = rental_stageMapping[currentStage];
if (currentStageIndex !== undefined) {
    $listItems.eq(currentStageIndex)
        .addClass('current')
        .attr('aria-selected', 'true');
}

function validateTables() {
let allTablesValid = true;
let hasAtLeastOneCheckedOutTable = false;
let checkedOutTables = [];
let quantityValidationPassed = true; // Flag for quantity validation
let allTablesNone = true; // New flag to track if all tables are "None"
let message = "";

console.log("Starting validation...");

$(".checkout-products-table").each(function (tableIndex) {
    let allCheckedOut = true;
    let allNone = true;
    let errorMessageContainer = $(this).closest(".table-wrapper").find(".error-message");
    let tableId = $(this).data("table-id");

    console.log(`Checking Table ${tableIndex + 1} (ID: ${tableId})...`);

    $(this).find(".another-select-checkout").each(function (rowIndex) {
        let status = $(this).val() || "None";

        console.log(`  Row ${rowIndex + 1} Status:`, status);

        if (status !== "None") {
            allNone = false;
        }
        if (status !== "Check Out") {
            allCheckedOut = false;
        }
    });

    console.log(`  Table ${tableIndex + 1}: allCheckedOut = ${allCheckedOut}, allNone = ${allNone}`);

    if (allCheckedOut) {
        hasAtLeastOneCheckedOutTable = true;
        checkedOutTables.push(tableId);
        errorMessageContainer.hide();
        console.log(`  Table ${tableIndex + 1} is fully CHECKED OUT.`);
    } else if (!allNone && !allCheckedOut) {
        errorMessageContainer.text("All products in this table must have the same status.").show();
        allTablesValid = false;
        console.log(`  Table ${tableIndex + 1} has mixed statuses (INVALID).`);
    } else {
        errorMessageContainer.hide();
        console.log(`  Table ${tableIndex + 1} is fully NONE (IGNORED).`);
    }
    if (!allNone) {
        allTablesNone = false;
    }
});

if (allTablesNone) {
    console.log("All tables have status 'None'. Validation failed.");
    return { valid: false, message: "Please make sure to update or change statuses as needed and verify them." };
}
// **New Quantity Validation**
// $(".checkout-products-table").each(function () {
//     $(this).find('.wizard-required').each(function () {
//         let thisValue = $(this).val();
//         let dataValue = $(this).data('value');
//         let errorMessage = "";

//         if ($(this).is('input') && $(this).attr('type') === 'text') {
//             if (thisValue === "") {
//                 errorMessage = "Quantity does not match. Please resolve it....";
//             } else if (thisValue != dataValue) {
//                 errorMessage = "Quantity does not match. Please resolve it....";
//             }
//         }

//         if (errorMessage) {
//             sendQuantityUpdateAjax();
//         } else {
//             $(this).siblings(".wizard-form-error").slideUp();
//         }
//     });
// });

if (!quantityValidationPassed) {
    console.log("Quantity does not match. Please resolve it....");
    return { valid: false, message: "Quantity does not match. Please resolve it...." };
}

if (!hasAtLeastOneCheckedOutTable) {
    console.log("Please make sure to update or change statuses as needed and verify them.");
    return { valid: false, message: "Please make sure to update or change statuses as needed and verify them." };
}

if (!allTablesValid) {
    console.log("Please make sure to update or change statuses as needed and verify them.");
    return { valid: false, message: "Please make sure to update or change statuses as needed and verify them." };
}

// **Only proceed if both validations pass**
console.log("All validations PASSED. Proceeding to change status.");
// change_delivery_checkout_status(checkedOutTables);
return { valid: true, message: "All validations PASSED. Proceeding to change status." };
}

// let debounce_check_outTimer;
// function change_delivery_checkout_status(checkedOutTables) {
// clearTimeout(debounce_check_outTimer);
// debounce_check_outTimer = setTimeout(() => {
//     console.log('checkedOutTables: ', checkedOutTables);
//     $.ajax({
//         url: update_delivery_stock_url,
//         type: "POST",
//         headers: {
//             'X-CSRFToken': csrf_token,
//         },
//         data: JSON.stringify({ checkedOutTables: checkedOutTables }),
//         contentType: "application/json",
//         dataType: "json",
//         success: function (response) {
//             console.log('response: ', response);
//             // toastr.success("Status and Quantity Updated Successfully!", 'Success', {
//             //     closeButton: true,
//             //     progressBar: true,
//             //     positionClass: 'toast-bottom-right',
//             //     timeOut: 6000
//             // });
//         },
//         error: function (error) {
//             console.log('error: ', error);
//         }
//     });
// }, 300);  // Wait 300ms before executing the function
// }
// });

function validatepickupTables() {
var tables = $(".pickup-products-table");
var hasFullyLoadedTable = false;
var hasPartiallyLoadedTable = false;
var hasFullyNoneTable = true;

tables.each(function () {
    var table = $(this);
    var allLoaded = true;
    var hasLoaded = false;
    var hasNone = false;

    table.find(".another-select-Loaded").each(function () {
        var statusValue = $(this).val();
        if (statusValue !== "Loaded") {
            allLoaded = false;
        }
        if (statusValue === "Loaded") {
            hasLoaded = true;
        }
        if (statusValue === "None") {
            hasNone = true;
        }
    });

    if (allLoaded) {
        hasFullyLoadedTable = true;
    }
    if (hasLoaded && hasNone) {
        hasPartiallyLoadedTable = true;
    }
    if (hasLoaded) {
        hasFullyNoneTable = false;
    }
});

if (hasPartiallyLoadedTable || hasFullyNoneTable) {
    Swal.fire({
        text: "Please make sure to update or change statuses as needed and verify them.",
        icon: 'error',
        confirmButtonText: 'OK'
    });
    return false;
}

return true;
}

function sendQuantityUpdateAjax() {
return new Promise((resolve) => {
    changedQuantities.length = 0; // Clear the list before updating
    let quantityErrors = [];

    $(".checkout-products-table").each(function () {
        $(this).find('.wizard-required').each(function () {
            let productId = $(this).data('product-id');
            let newQuantity = parseInt($(this).val()) || 0;
            let expectedQuantity = parseInt($(this).data('value')) || 0;
            let deliveryPk = $(this).data('delivery-pk');
            let deliveryUniqueId = $(this).data('delivery-unique_id');

            if (newQuantity !== expectedQuantity) {
                changedQuantities.push({
                    product_id: productId,
                    new_quantity: newQuantity,
                    delivery_pk: deliveryPk,
                    delivery_unique_id: deliveryUniqueId
                });

                quantityErrors.push({
                    product_id: productId,
                    expected: expectedQuantity,
                    entered: newQuantity,
                    delivery_pk: deliveryPk,
                    delivery_unique_id: deliveryUniqueId
                });
            }
        });
    });

    console.log("Changed Quantities: updated global list", changedQuantities);
    resolve();
});
}



function sendQuantityAjaxRequest(changedQuantities) {
return new Promise((resolve) => {
    if (changedQuantities.length === 0) {
        /*Swal.fire({
            title: "No Changes",
            text: "No quantity changes detected.",
            icon: "info",
            confirmButtonText: "OK"
        });*/
        resolve(false);
        return;
    }

    $.ajax({
        url: update_quantity_url,
        type: "POST",
        headers: { "X-CSRFToken": csrf_token },
        data: JSON.stringify({ updatedQuantities: changedQuantities }),
        contentType: "application/json",
        dataType: "json",
        success: function (response) {
            console.log('response: ', response);
            
            resolve(true); // AJAX success, return true
        },
        error: function (error) {
            Swal.fire({
                title: "Error",
                text: "Failed to update quantities. Please try again.",
                icon: "error",
                confirmButtonText: "OK"
            });
            console.log("AJAX Error:", error);
            resolve(false); // AJAX failed, return false
        }
    });
});
}
